# Copyright 2011  Petter Urkedal
#
# This file is part of the Viz Standard Library <http://www.vizlang.org/>.
#
# The Viz Standard Library (VSL) is free software: you can redistribute it
# and/or modify it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# The VSL is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with the VSL.  If not, see <http://www.gnu.org/licenses/>.

#?ffoc include compat.ocaml_prereq

in combinators
    let ident x be x
    let konst x y be x
    let (g <* f) x be g (f x)  # also g ∘ f
    let (f *> g) x be g (f x)
    let f <@ x be f x  # f "at" x
    let x @> f be f x  # x "under" f

in basics
    let fst (x, _) be x
    let snd (_, y) be y

    sig a_total_order
	type t
	val cmp : t → t → torder

in bool_ops
    #?ffoc include compat.ocaml_pervasives.bool_ops
    let (¬* f)   x0 be ¬ f x0
    let (f ∧* g) x0 be f x0 ∧ g x0
    let (f ∨* g) x0 be f x0 ∨ g x0
    let (¬** f)   x0 x1 be ¬ f x0 x1
    let (f ∧** g) x0 x1 be f x0 x1 ∧ g x0 x1
    let (f ∨** g) x0 x1 be f x0 x1 ∨ g x0 x1

in extend_basic_nat.(Nat : compat.ocaml_miscints.a_basic_nat)
    open Nat
    let min x y be leq x y ⇒ x; y
    let max x y be leq x y ⇒ y; x

in nativeint include compat.ocaml_miscints.nativeint
	     include extend_basic_nat.(compat.ocaml_miscints.nativeint)
in int32 include compat.ocaml_miscints.int32
	 include extend_basic_nat.(compat.ocaml_miscints.int32)
in int64 include compat.ocaml_miscints.int64
	 include extend_basic_nat.(compat.ocaml_miscints.int64)
in nat32 include compat.ocaml_miscints.nat32
	 include extend_basic_nat.(compat.ocaml_miscints.nat32)
in nat64 include compat.ocaml_miscints.nat64
	 include extend_basic_nat.(compat.ocaml_miscints.nat64)

in int_ops
    val 1'- : int → int
    val 2'+ : int → int → int
    val 2'- : int → int → int
    val 2'× : int → int → int
    val 2'/ : int → int → int
    val 2'mod : int → int → int
    #?ffoc include compat.ocaml_pervasives.int_ops

in action
    val return : α → action φ α
    val 2'>>= : action φ α → (α → action φ β) → action φ β
    val 2'>> : action φ unit → action φ α → action φ α

    let return be __builtin_action_return
    let 2'>>= m k be __builtin_action_bind k m
    let 2'>> m n be __builtin_action_bind (() +> n) m

# This is for our own use, as we typically open prereq on the top of each
# library structure.  The pervasive structure does a similar inclusion for
# client code.
include basics
include combinators
include bool_ops
include int_ops
#?ffoc include compat.ocaml_unicode.pervasive
#?ffoc include compat.ocaml_pervasives.pervasive
#?ffoc include compat.ocaml_miscints.pervasive
