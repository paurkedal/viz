open effect
open foreign.cabi.memory
open foreign.cabi.record

in simple
    in rep
	include! fabric
	let a do acquire int32_ev
	let b do acquire int32_ev
	let ev do realize
    let make a b
	be record.init rep.ev (that : ∀ψ. reflens.r ψ δ → effect ψ α)
	    which! at r
	do int32T_as_intT.store a (reflens.focus_field rep.a r)
	do int32T_as_intT.store b (reflens.focus_field rep.b r)

in head_fw include! fabric

in node
    include! fabric
    let id_ev do acquire int32_ev
    let owner_ev do acquire head_fw.iptr_ev
    let next_ev do acquire iptr_ev
    let ev do realize

in head
    include head_fw
    let cycle_ev do acquire node.iptr_ev
    let ev do realize

lex S0 ./

let init_cycle i j
    be snd @ record.init head.ev (that : ∀ψ. reflens.r ψ δ → effect ψ α)
	which! at head

    let node0 do record.alloc node.ev
    let node1 do record.alloc node.ev

    let r./ev be reflens.focus_field ev r

    do reflens.store_iptr node0 head./head.cycle_ev

    do reflens.store_iptr head node0./node.owner_ev
    do int32T_as_intT.store i node0./node.id_ev
    do reflens.store_iptr node1 node0./node.next_ev

    do reflens.store_iptr head node1./node.owner_ev
    do int32T_as_intT.store j node1./node.id_ev
    do reflens.store_iptr node0 node1./node.next_ev

let valid_cycle cyc i j
    let head be record.focus cyc
    let l./ev be lens.focus_field ev l
    let node0 be lens.get_ptr head./head.cycle_ev
    let node1 be lens.get_ptr node0./node.next_ev
    be int32T_as_intT.get node0./node.id_ev = i
     ∧ int32T_as_intT.get node1./node.id_ev = j

in testrec
    include! fabric
    let u0_ev do acquire head.ev
    let u1_ev do acquire nat8_ev
    let u2_ev do acquire node.ev
    let u3_ev do acquire nat8_ev
    let u4_ev do acquire int64_ev
    let ev do realize

let! show_field s d
    do print "    " >> print s >> print "; offset = "
    do print (int.show (offset.as_int (field_offset d)))
    do print "\n"

let! show_record name ev
    do print "RECORD " >> print name >> print "; size = "
    do print (int.show (offset.as_int (record_size ev)))
    do print "; alignment = "
    do print (int.show (offset.as_int (record_alignment ev)))
    do print "\n"

let main
    do show_record "head" head.ev
    do show_record "node" node.ev
    do show_record "test" testrec.ev
    do show_field "u0 : head" testrec.u0_ev
    do show_field "u1 : nat8" testrec.u1_ev
    do show_field "u2 : node" testrec.u2_ev
    do show_field "u3 : nat8" testrec.u3_ev
    do show_field "u4 : int64" testrec.u4_ev

    let ab be simple.make 21 23

    let cyc be init_cycle 10 11
    assert (valid_cycle cyc 10 11)
    do print "Done.\n"
