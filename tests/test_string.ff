open action_ops

# No polymorphic comparison yet...

let sl_eq xs ys be (xs, ys) @> what
    at ([], []) be true
    at ([], _) be false
    at (_, []) be false
    at ([x; xs], [y; ys]) be string.eq x y ∧ sl_eq xs ys

let main
    let 2'= be int.eq

    assert   string.for_all char.is_space "   "
    assert ¬ string.for_all char.is_space "x  "
    assert ¬ string.for_all char.is_space " x "
    assert ¬ string.for_all char.is_space "  x"

    assert ¬ string.for_some char.is_space "xxx"
    assert   string.for_some char.is_space " xx"
    assert   string.for_some char.is_space "x x"
    assert   string.for_some char.is_space "xx "

    assert string.starts_with "" ""
    assert string.starts_with "" "x"
    assert string.starts_with "x" "x"
    assert string.starts_with "x" "xy"

    assert string.ends_with "" ""
    assert string.ends_with "" "x"
    assert string.ends_with "x" "x"
    assert string.ends_with "y" "xy"

    assert   string.contains_char c"x" "x"
    assert   string.contains_char c"x" "yyxyy"
    assert ¬ string.contains_char c"x" ""
    assert ¬ string.contains_char c"x" "yy"

    assert string.contains_sub "" ""
    assert string.contains_sub "" "x"
    assert string.contains_sub "x" "x"
    assert string.contains_sub "x" "-x-"
    assert string.contains_sub "xy" "xy"
    assert string.contains_sub "xy" "-xy-"
    assert ¬ string.contains_sub "x" ""
    assert ¬ string.contains_sub "x" "--"
    assert ¬ string.contains_sub "xy" "-x-"

    assert string.count_char c"x" "" = 0
    assert string.count_char c"x" "--" = 0
    assert string.count_char c"x" "--x--" = 1
    assert string.count_char c"x" "x--xx--x" = 4

    assert string.count_for char.is_space "" = 0
    assert string.count_for char.is_space "-" = 0
    assert string.count_for char.is_space "- -" = 1
    assert string.count_for char.is_space " -\n\t- " = 4

    assert string.skip_space "" 0 = 0
    assert string.skip_space "x" 0 = 0
    assert string.skip_space "   x" 1 = 3
    assert string.skip_space "   x" 3 = 3
    assert string.skip_space "  " 1 = 2
    assert string.skip_space "  " 2 = 2
    assert string.skip_space "tt tt" 2 = 3

    assert string.rskip_space "" 0 = 0
    assert string.rskip_space " " 1 = 0
    assert string.rskip_space "a  " 1 = 1
    assert string.rskip_space "a  " 3 = 1

    assert string.skip_to_char c"x" "--x--" 0 = 2
    assert string.rskip_to_char c"x" "--x--" 4 = 3
    assert string.skip_to_char c"x" "--" 0 = 2
    assert string.rskip_to_char c"x" "--" 2 = 0

    assert string.skip_to_sub "x" "x" 0 = 0
    assert string.skip_to_sub "x" "-" 0 = 1
    assert string.skip_to_sub "x" "-x" 0 = 1
    assert string.skip_to_sub "xy" "--xy--xy--" 0 = 2
    assert string.skip_to_sub "xy" "--xy--xy--" 2 = 2
    assert string.skip_to_sub "xy" "--xy--xy--" 3 = 6

    let 2'= be string.eq

    assert string.strip "" = ""
    assert string.strip "x" = "x"
    assert string.strip " x" = "x"
    assert string.strip "x " = "x"
    assert string.strip "  x  " = "x"

    assert "s-t-e" = __unsafe_run_action what!
	let buf do string.buf.create
	do string.buf.put_char buf c"s"
	do string.buf.put_string buf "-t-"
	do string.buf.put_char buf c"e"
	do string.buf.contents buf

    assert string.join ", " [] = ""
    assert string.join ", " ["xy"] = "xy"
    assert string.join ", " ["ab", "c", "de"] = "ab, c, de"

    assert sl_eq (string.csplit_on_space "") []
    assert sl_eq (string.csplit_on_space " ") []
    assert sl_eq (string.csplit_on_space "one") ["one"]
    assert sl_eq (string.csplit_on_space " one  ") ["one"]
    assert sl_eq (string.csplit_on_space "is 3 words") ["is"; "3"; "words";]
    assert sl_eq (string.csplit_on_space "  is  two ") ["is"; "two";]

    be ()
