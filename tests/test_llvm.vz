open effect
open compiler

in ll include llvm.core
in lltran include llvm.transforms
in llexec include llvm.execution

let newline be print "\n" >> flush_all

let! build_get42 ctx mdl
    let int32t be ll.int32_type ctx
    let ft be ll.function_type int32t #[]
    let get42 do ll.add_function mdl "get42" ft
    let entry do ll.append_block ctx get42 "entry"
    let B do ll.create_builder ctx
    do ll.position_builder_at_end B entry
    let res do ll.const_int int32t 42
    let _ do ll.build_ret B res
    be get42

let! build_fact ctx mdl
    let int32t be ll.int32_type ctx
    let ft be ll.function_type int32t #[int32t]
    assert __generic_eq (ll.type_kind ft) ll.lkind_function

    let fact do ll.add_function mdl "fact" ft
    do print "gc: "
    do ll.get_function_gc fact >>= (none% ↦ print "none"; some% s ↦ print s)
    do newline
    do ll.set_function_callconv fact ll.callconv_c

    let n be ll.param fact 0

    let entry do ll.append_block ctx fact "entry"
    let if_eq_0 do ll.append_block ctx fact "if_eq_0"
    let if_ne_0 do ll.append_block ctx fact "if_ne_0"
    let finish do ll.append_block ctx fact "finish"

    let B do ll.create_builder ctx

    do ll.position_builder_at_end B entry
    let zero do ll.const_int int32t 0
    let eq_0 do ll.build_icmp B ll.iorder.EQ n zero "eq_0"
    let _ do ll.build_cond_br B eq_0 if_eq_0 if_ne_0

    do ll.position_builder_at_end B if_eq_0
    let res_if_eq_0 do ll.const_int int32t 1
    let _ do ll.build_br B finish

    do ll.position_builder_at_end B if_ne_0
    let one do ll.const_int int32t 1
    let n_minus_1 do ll.build_sub B n one "n - 1"
    let fact_n_minus_1 do ll.build_call B fact #[n_minus_1] "fact (n - 1)"
    let res_if_ne_0 do ll.build_mul B n fact_n_minus_1 "n * fact (n - 1)"
    let _ do ll.build_br B finish

    do ll.position_builder_at_end B finish
    let res do ll.build_phi B int32t "result"
    do ll.add_incoming res #[(res_if_eq_0, if_eq_0), (res_if_ne_0, if_ne_0)]
    let _ do ll.build_ret B res

    do ll.dispose_builder B
    be fact

let! check_ee_function ee name
    do llexec.engine.find_function ee "_no_such_thing_" >>= what!
	at none% do print "No function " >> print name
	at some% f
	    do print "Found function " >> print name >> print ": "
	    do ll.dump_value f
    do print "\n"

let main
    let ctx do ll.create_context
    let mdl do ll.create_module ctx "test_llvm"
    do print "layout: " >> (ll.get_data_layout mdl >>= print) >> newline
    do print "target: " >> (ll.get_target mdl >>= print) >> newline

    let get42 do build_get42 ctx mdl
    let fact do build_fact ctx mdl

    do ll.assert_valid_module mdl

    do llexec.link_in_mcjit
    do llvm.target.initialize_native_asm_printer
    do llvm.target.initialize_native_target

    let ee do llexec.engine.create_jit 2 mdl
    let pm do ll.module_pass_manager.create
    let td do llexec.engine.get_target_data ee
    do llvm.target.add_target_data td pm
    do lltran.scalar.add_constant_propagation_pass pm
    do lltran.scalar.add_instruction_combining_pass pm
    do lltran.scalar.add_promote_memory_to_register_pass pm
    do lltran.scalar.add_CFG_simplification_pass pm
    let _ do ll.module_pass_manager.run pm mdl

    do check_ee_function ee "get42"
    do check_ee_function ee "fact"
    do check_ee_function ee "absent_function"

    do ll.dump_module mdl

    let int32t be ll.int32_type ctx

    let gv42 do llexec.engine.run_function ee get42 #[]
    assert llexec.generic_value.to_int gv42 = 42

    let args be #[llexec.generic_value.of_int int32t 5]
    let gv120 do llexec.engine.run_function ee fact args
    assert llexec.generic_value.to_int gv120 = 120

    do ll.dispose_module mdl
    do ll.dispose_context ctx
    do print "Done.\n"
